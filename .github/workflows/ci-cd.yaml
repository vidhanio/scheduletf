name: CI/CD

on:
  - push
  - pull_request

env:
  POSTGRES_USER: vidhanio
  POSTGRES_PASSWORD: password
  POSTGRES_DB: matchbox-ci

  DATABASE_URL: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost/$POSTGRES_DB

jobs:
  test:
    name: Test

    permissions:
      contents: read

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install `sea-orm-cli`
        run: cargo install sea-orm-cli

      - name: Run migrations
        run: sea-orm-cli migrate

      - name: Execute tests
        run: cargo test --all-features --all-targets

  check:
    name: Check

    permissions:
      contents: read

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check code
        run: cargo clippy --all-features --all-targets -- -D warnings

  format:
    name: Format

    permissions:
      contents: read

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

  build:
    name: Build

    environment:
      name: Development

    needs:
      - test
      - check
      - format

    permissions:
      contents: read
      packages: write

    runs-on: ubuntu-latest

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Docker metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/vidhanio/matchbox
            registry.fly.io/matchbox
          tags: |
            type=ref,event=branch
            type=sha
          flavor: |
            latest=true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Fly Registry
        uses: docker/login-action@v3
        with:
          registry: registry.fly.io
          username: x
          password: ${{ secrets.FLY_API_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy

    environment:
      name: Development
      url: https://fly.io/apps/matchbox/monitoring

    runs-on: ubuntu-latest

    needs: build

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Set secrets
        run: >
          flyctl secrets set --stage
          DISCORD_BOT_TOKEN="$DISCORD_BOT_TOKEN"
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only
